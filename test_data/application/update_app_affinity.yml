resource:
  description: $description
namespace: $K8S_NAMESPACE
kubernetes:
  - apiVersion: extensions/v1beta1
    firstTimestamp: null
    kind: DaemonSet
    lastTimestamp: null
    metadata:
      name: $app_name1
      namespace: $K8S_NAMESPACE
    spec:
      strategy:
        type: RollingUpdate
      selector:
        matchLabels:
          service.alauda.io/name: $app_name1
      template:
        metadata:
          labels:
            service.alauda.io/name: $app_name1
        spec:
          affinity: {}
          nodeSelector:
            ip: $slaveip
          containers:
          - image: $IMAGE
            imagePullPolicy: Always
            name: $app_name1
            resources:
              limits:
                cpu: 20m
                memory: 50M
              requests:
                cpu: 20m
                memory: 50M
  - kind: Service
    apiVersion: v1
    metadata:
      name: $app_name1
      namespace: $K8S_NAMESPACE
      labels:
        app.rubick.alauda.io/name: $app_name1
      annotations:
        loadbalancer.alauda.io/bind: '[{"container_port":80,"protocol":"http","name":"$HAPROXY_NAME","port":80}]'
    spec:
      selector:
        service.alauda.io/name: $app_name1
      type: NodePort
      ports:
        - name: 80-80-nodeport
          protocol: TCP
          port: 80
          targetPort: 80
  - apiVersion: apps/v1beta1
    kind: StatefulSet
    metadata:
      namespace: $K8S_NAMESPACE
      name: $app_name2
    spec:
      selector:
        matchLabels:
          service.alauda.io/name: $app_name2
      template:
        metadata:
          labels:
            service.alauda.io/name: $app_name2
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: service.alauda.io/name
                        operator: In
                        values:
                          - $app_name1
                  namespaces:
                    - $K8S_NAMESPACE
          containers:
            - name: $app_name2
              image: $IMAGE
              imagePullPolicy: Always
              resources:
                requests:
                  memory: 50M
                  cpu: 50m
                limits:
                  memory: 50M
                  cpu: 50m
          hostNetwork: false
      replicas: 1
      updateStrategy:
        type: RollingUpdate
      serviceName: $app_name2
  - apiVersion: autoscaling/v1
    kind: HorizontalPodAutoscaler
    metadata:
      name: $app_name2
      namespace: $K8S_NAMESPACE
    spec:
      scaleTargetRef:
        apiVersion: extensions/v1beta1
        kind: StatefulSet
        name: $app_name2
      minReplicas: 1
      maxReplicas: 20
  - kind: Service
    apiVersion: v1
    metadata:
      name: $app_name2
      namespace: $K8S_NAMESPACE
      labels:
        app.rubick.alauda.io/name: $app_name2
      annotations:
        loadbalancer.alauda.io/bind: '[{"container_port":80,"protocol":"http","name":"$HAPROXY_NAME","port":80}]'
    spec:
      selector:
        service.alauda.io/name: $app_name2
      clusterIP: None
      ports:
        - name: 80-80-headless
          protocol: TCP
          port: 80
          targetPort: 80